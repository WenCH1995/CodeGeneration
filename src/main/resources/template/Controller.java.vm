package ${package}.${moduleName}.controller;


import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.huazheng.tunny.admin.api.entity.Student;
import com.huazheng.tunny.common.core.util.ExcelUtil;
import com.huazheng.tunny.common.core.util.Query;
import com.huazheng.tunny.bluetown.utli.SysLogUtils;
import com.huazheng.tunny.common.security.util.SecurityUtils;
import com.huazheng.tunny.common.security.DTO.SecruityUser;
import com.huazheng.tunny.bluetown.service.SysLogService;
import com.huazheng.tunny.bluetown.utli.R;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.huazheng.tunny.bluetown.utli.SysLogUtils;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${pathName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    @Autowired
    private SysLogService sysLogService;

    /**
    *  列表
    * @param params
    * @return
    */
    @GetMapping("/page")
    public Page page(@RequestParam Map<String, Object> params) {
        SecruityUser user = SecurityUtils.getUserInfo();
        //数据库字段值完整查询
        // return  ${classname}Service.selectPage(new Query<>(params), new EntityWrapper<>());
        //对象模糊查询
        return ${classname}Service.select${className}ListByLike(new Query<>(params));
    }


    /**
     * 信息
     * @param ${pk.lowerAttrName}
     * @return R
     */
    @GetMapping("/{${pk.lowerAttrName}}")
    public R info(@PathVariable("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}) {
        SecruityUser user = SecurityUtils.getUserInfo();
        ${className} ${classname} =${classname}Service.selectById(${pk.lowerAttrName});
        return R.ok().put("${classname}",${classname});
    }

    /**
     * 保存
     * @param ${classname}
     * @return R
     */
    @PostMapping
    public R save(@RequestBody ${className} ${classname}) {
        SecruityUser user = SecurityUtils.getUserInfo();
        ${classname}Service.insert(${classname});
##        SysLog sysLog = SysLogUtils.getSysLog("新增${comments}",
##                ${classname}.getPingtaiId(),
##                ${classname}.getProjectId(),
##                ${classname}.getCompanyId(),
##                ${classname}.getFenqiid());
##        sysLogService.insertSysLog(sysLog);
        return R.ok();
    }

    /**
     * 修改
     * @param ${classname}
     * @return R
     */
    @PutMapping
    public R update(@RequestBody ${className} ${classname}) {
        SecruityUser user = SecurityUtils.getUserInfo();
        ${classname}Service.updateById(${classname});
##        SysLog sysLog = SysLogUtils.getSysLog("修改${comments}",
##            ${classname}.getPingtaiId(),
##            ${classname}.getProjectId(),
##            ${classname}.getCompanyId(),
##            ${classname}.getFenqiid());
##        sysLogService.insertSysLog(sysLog);
        return R.ok();
    }

    /**
     * 删除
     * @param ${pk.lowerAttrName}
     * @return R
     */
    @DeleteMapping("/{${pk.lowerAttrName}}")
    public R delete(@PathVariable  ${pk.attrType} ${pk.lowerAttrName}) {
        SecruityUser user = SecurityUtils.getUserInfo();
        ${classname}Service.delete${className}ById(${pk.lowerAttrName});

##        ${className} ${classname} = ${classname}Service.deleteById(id);
##        SysLog sysLog = SysLogUtils.getSysLog(
##                "删除${comments}",
##                ${classname}.getPingtaiId(),
##                ${classname}.getProjectId(),
##                ${classname}.getCompanyId(),
##                ${classname}.getFenqiid());
##        sysLogService.insertSysLog(sysLog);
        return R.ok();
    }


    public static LocalDateTime LocalDateTime(Object obj) throws ParseException {
        SimpleDateFormat sim = new SimpleDateFormat("yyyy-MM-dd");
        Date parse = sim.parse(obj.toString());
        Instant instant = parse.toInstant();
        ZoneId zoneId = ZoneId.systemDefault();
        LocalDateTime localDateTime = instant.atZone(zoneId).toLocalDateTime();
        return localDateTime;
    }
}
